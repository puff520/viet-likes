package com.likes.common.service.vip.impl;import cn.hutool.core.util.ObjectUtil;import com.baomidou.dynamic.datasource.annotation.DS;import com.likes.common.constant.Constants;import com.likes.common.constant.RedisKeys;import com.likes.common.enums.StatusCode;import com.likes.common.exception.BusinessException;import com.likes.common.mybatis.entity.*;import com.likes.common.mybatis.mapper.MemLevelConfigMapper;import com.likes.common.mybatis.mapper.MemLevelMapper;import com.likes.common.mybatis.mapper.MemLevelRecordMapper;import com.likes.common.mybatis.mapperext.member.MemLevelConfigMapperExt;import com.likes.common.mybatis.mapperext.member.MemLevelMapperExt;import com.likes.common.mybatis.mapperext.member.MemRelationshipMapperExt;import com.likes.common.service.member.MemBaseinfoService;import com.likes.common.service.member.MemLevelConfigService;import com.likes.common.service.member.MemLevelService;import com.likes.common.service.money.TraOrderinfomService;import com.likes.common.service.money.TraOrdertrackingService;import com.likes.common.service.vip.VipService;import com.likes.common.util.DateUtils;import com.likes.common.util.SnowflakeIdWorker;import com.likes.common.util.redis.RedisBusinessUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import tk.mybatis.mapper.entity.Example;import javax.annotation.Resource;import java.util.Comparator;import java.util.Date;import java.util.List;import java.util.stream.Collectors;@Servicepublic class VipSeviceImpl implements VipService {    private final Logger log = LoggerFactory.getLogger(this.getClass());    @Resource    private MemLevelConfigService memLevelConfigService;    @Resource    private MemLevelMapperExt memLevelMapperExt;    @Resource    private MemBaseinfoService memBaseinfoService;    @Resource    private MemLevelConfigMapper memLevelConfigMapper;    @Resource    private MemLevelService memLevelService;    @Resource    private MemLevelMapper memLevelMapper;    @Resource    private MemLevelRecordMapper memLevelRecordMapper;    @Resource    private MemRelationshipMapperExt memRelationshipMapperExt;    @Resource    private MemLevelConfigMapperExt memLevelConfigMapperExt;    @Resource    private TraOrderinfomService traOrderinfomMapperService;    @Resource    private TraOrdertrackingService traOrdertrackingMapperService;    @Override    @Transactional    public boolean buyVip(String accno, Integer levelSeq) {        boolean changeFlag = true;        Integer memLevelSeq = memLevelConfigService.getMemLevelConfig(accno).getLevelSeq();        if (levelSeq.equals(memLevelSeq)) {            changeFlag = false;            throw new BusinessException("不能修改为同等级");        }        Example example = new Example(MemLevelConfig.class);        Example.Criteria criteria = example.createCriteria();        criteria.andEqualTo("levelSeq", levelSeq);        MemLevelConfig levelConfig = memLevelConfigMapper.selectOneByExample(example);        MemBaseinfo memBaseinfo = memBaseinfoService.getUserByAccno(accno);        TraOrderinfom traOrderinfom = createOrderInfo(memBaseinfo, levelConfig);        return buyVIPLevel(memBaseinfo, traOrderinfom, levelConfig, changeFlag);    }    private TraOrderinfom createOrderInfo(MemBaseinfo memBaseinfo, MemLevelConfig levelConfig) {        Date nowDate = new Date();        String orderno = SnowflakeIdWorker.generateShortId();        TraOrderinfom traOrderinfom = new TraOrderinfom();        traOrderinfom.setMealid(null);        //给会员代充        traOrderinfom.setOrdertype(Constants.ORDERTYPE16);        traOrderinfom.setOrderno(orderno);        traOrderinfom.setAccno(memBaseinfo.getAccno());        traOrderinfom.setPaycode(null);        traOrderinfom.setOrderdate(nowDate);        traOrderinfom.setBuyVip(Long.parseLong(levelConfig.getLevelSeq() + ""));        // 设置过期时间 1 天 替换成 23:59:00秒        Date twoDayAfter = DateUtils.afterDays(nowDate, 1);        String twoDayAfterString = DateUtils.formatDate(twoDayAfter, "yyyy-MM-dd HH:mm:ss");        String expiredateString = twoDayAfterString.substring(0, 10).concat(" 23:59:00");        try {            traOrderinfom.setExpiredate(DateUtils.parseDate(expiredateString, "yyyy-MM-dd HH:mm:ss"));        } catch (Exception e) {            e.printStackTrace();        }        traOrderinfom.setOldamt(levelConfig.getRechargeAmount());        //实际到账金额（赠送后的金额）        traOrderinfom.setSumamt(levelConfig.getRechargeAmount());        traOrderinfom.setRealamt(levelConfig.getRechargeAmount());        traOrderinfom.setIsinvoice(0);        traOrderinfom.setOrderstatus(Constants.ORDER_ORD15);        traOrderinfom.setAccountstatus(Constants.ORDER_ACC04);        traOrderinfom.setOrdernote("管理员用户[" + memBaseinfo.getNickname() + "]购买vip: ");        traOrderinfom.setPaydate(nowDate);        return traOrderinfom;    }    public boolean buyVIPLevel(MemBaseinfo memBaseinfo, TraOrderinfom traOrderinfom, MemLevelConfig memLevelConfig, Boolean changeFlag) {        MemLevel sendMemLevel = memLevelService.selectByAccno(memBaseinfo.getAccno());        MemLevelConfig beforeLevel = memLevelConfigMapperExt.selectMemLevel(memBaseinfo.getAccno());        if (ObjectUtil.isNull(sendMemLevel)) {            //当前用户 会员已到期 处理            List<MemLevelConfig> leveList = memLevelConfigService.selectMemLevlConfigByLevelSeq();            sendMemLevel = memLevelMapperExt.getByAccnoAndLevelId(memBaseinfo.getAccno(), leveList.get(0).getId());        }        sendMemLevel.setLevelid(null);        sendMemLevel.setLevelConfigId(memLevelConfig.getId());        sendMemLevel.setMemlevel(memLevelConfig.getLevel());        sendMemLevel.setLevellog("后台管理员操作用户购买VIP【" + memLevelConfig.getLevel() + "】");        sendMemLevel.setCreateTime(new Date());        sendMemLevel.setIsDelete(false);        sendMemLevel.setExpireTime(DateUtils.getEndOfDay(DateUtils.addDays(new Date(), memLevelConfig.getExpireTime())));        sendMemLevel.setCreateUser(memBaseinfo.getAccno());        sendMemLevel.setUpdateUser(memBaseinfo.getAccno());        memLevelService.insertSelective(sendMemLevel);        MemLevelRecord memLevelRecord = new MemLevelRecord();        memLevelRecord.setAccno(memBaseinfo.getAccno());        String superiorName = memRelationshipMapperExt.selectSuperiorName(memBaseinfo.getAccno());        String headName = memRelationshipMapperExt.selectHeadName(memBaseinfo.getAccno());        memLevelRecord.setUserName(memBaseinfo.getEmail());        memLevelRecord.setSuperiorName(superiorName);        memLevelRecord.setHeadName(headName);        memLevelRecord.setBeforeLevel(beforeLevel.getLevel());        memLevelRecord.setCurrentLevel("vip" + traOrderinfom.getBuyVip());        memLevelRecord.setChangeAmount(traOrderinfom.getRealamt());        memLevelRecord.setChangeType(2);        memLevelRecord.setCreateTime(new Date());        memLevelRecordMapper.insertSelective(memLevelRecord);        MemBaseinfo vipBaseinfo = new MemBaseinfo();        vipBaseinfo.setLevel(traOrderinfom.getBuyVip().intValue());        vipBaseinfo.setMemid(memBaseinfo.getMemid());        memBaseinfoService.updateByPrimaryKeySelective(vipBaseinfo);        // 订单生产成功后 ，在写入订单操作轨迹        int i = traOrderinfomMapperService.insertOrder(traOrderinfom);        if (i < 0) {            throw new BusinessException(StatusCode.LIVE_ERROR_10004.getCode(), "下单失败");        }        traOrderinfom = traOrderinfomMapperService.selectByPrimaryKey(traOrderinfom.getOrderid());        // 订单轨迹信息        TraOrdertracking traOrdertracking = new TraOrdertracking();        traOrdertracking.setOrderid(traOrderinfom.getOrderid());        traOrdertracking.setTrackdate(new Date());        traOrdertracking.setOrderstatus(Constants.ORDER_ORD04);        traOrdertracking.setOperuse(memBaseinfo.getAccno());        traOrdertracking.setTrackbody("用户[" + memBaseinfo.getNickname() + "]充值金额" + traOrderinfom.getRealamt() + "元");        traOrdertrackingMapperService.insertSelective(traOrdertracking);        disposeRepeat();        RedisBusinessUtil.delete(RedisKeys.APP_MEMBER_LEVEL + memBaseinfo.getAccno());        return true;    }    public void disposeRepeat() {//        HintManager.clear();//        HintManager hintManager = HintManager.getInstance();//        hintManager.setWriteRouteOnly();        List<String> list = memLevelMapperExt.chongFuList();        for (String s : list) {            MemLevelExample memLevelExample = new MemLevelExample();            MemLevelExample.Criteria criteria = memLevelExample.createCriteria();            criteria.andAccnoEqualTo(s);            criteria.andIsDeleteEqualTo(false);            List<MemLevel> memLevelList = memLevelMapper.selectByExample(memLevelExample);            memLevelList.sort(Comparator.comparing(MemLevel::getLevelid));            MemLevel maxAgePerson = memLevelList.stream().max(Comparator.comparing(MemLevel::getLevelid)).get();            List<MemLevel> filterList = memLevelList.stream().filter(userBean -> userBean.getLevelid() < maxAgePerson.getLevelid()).collect(Collectors.toList());            for (MemLevel memLevel : filterList) {                memLevel.setIsDelete(true);                memLevelMapper.updateByPrimaryKeySelective(memLevel);            }        }        // 清除规则//        hintManager.close();    }}