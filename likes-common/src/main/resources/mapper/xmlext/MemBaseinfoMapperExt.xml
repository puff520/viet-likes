<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.likes.common.mybatis.mapperext.member.MemBaseinfoMapperExt">
    <resultMap id="BaseResultMap" type="com.likes.common.mybatis.entity.MemBaseinfo">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="memid" property="memid" jdbcType="BIGINT"/>
        <result column="unique_id" property="uniqueId" jdbcType="VARCHAR"/>
        <result column="accno" property="accno" jdbcType="VARCHAR"/>
        <result column="nickname" property="nickname" jdbcType="VARCHAR"/>
        <result column="memname" property="memname" jdbcType="VARCHAR"/>
        <result column="mobileno" property="mobileno" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="DECIMAL"/>
        <result column="idcardtype" property="idcardtype" jdbcType="VARCHAR"/>
        <result column="idcardno" property="idcardno" jdbcType="VARCHAR"/>
        <result column="idcardfront" property="idcardfront" jdbcType="VARCHAR"/>
        <result column="idcardback" property="idcardback" jdbcType="VARCHAR"/>
        <result column="birthday" property="birthday" jdbcType="DATE"/>
        <result column="nationality" property="nationality" jdbcType="VARCHAR"/>
        <result column="headimg" property="headimg" jdbcType="VARCHAR"/>
        <result column="registerdate" property="registerdate" jdbcType="TIMESTAMP"/>
        <result column="recomcode" property="recomcode" jdbcType="VARCHAR"/>
        <result column="describes" property="describes" jdbcType="VARCHAR"/>
        <result column="tag" property="tag" jdbcType="VARCHAR"/>
        <result column="clintipadd" property="clintipadd" jdbcType="VARCHAR"/>
        <result column="register_ip" property="registerIp" jdbcType="VARCHAR"/>
        <result column="register_dev" property="registerDev" jdbcType="VARCHAR"/>
        <result column="last_login_dev" property="lastLoginDev" jdbcType="VARCHAR"/>
        <result column="logincountry" property="logincountry" jdbcType="VARCHAR"/>
        <result column="memfeatures" property="memfeatures" jdbcType="VARCHAR"/>
        <result column="memorgin" property="memorgin" jdbcType="VARCHAR"/>
        <result column="fansnum" property="fansnum" jdbcType="BIGINT"/>
        <result column="goldnum" property="goldnum" jdbcType="DECIMAL"/>
        <result column="wait_amount" property="waitAmount" jdbcType="DECIMAL"/>
        <result column="withdrawal_remainder" property="withdrawalRemainder" jdbcType="DECIMAL"/>
        <result column="bet_amount" property="betAmount" jdbcType="DECIMAL"/>
        <result column="pay_amount" property="payAmount" jdbcType="DECIMAL"/>
        <result column="pay_max" property="payMax" jdbcType="DECIMAL"/>
        <result column="pay_first" property="payFirst" jdbcType="DECIMAL"/>
        <result column="pay_num" property="payNum" jdbcType="INTEGER"/>
        <result column="withdrawal_amount" property="withdrawalAmount" jdbcType="DECIMAL"/>
        <result column="withdrawal_max" property="withdrawalMax" jdbcType="DECIMAL"/>
        <result column="withdrawal_first" property="withdrawalFirst" jdbcType="DECIMAL"/>
        <result column="withdrawal_num" property="withdrawalNum" jdbcType="INTEGER"/>
        <result column="consume_amount" property="consumeAmount" jdbcType="DECIMAL"/>
        <result column="no_withdrawal_amount" property="noWithdrawalAmount" jdbcType="DECIMAL"/>
        <result column="chat_status" property="chatStatus" jdbcType="INTEGER"/>
        <result column="freeze_status" property="freezeStatus" jdbcType="INTEGER"/>
        <result column="bet_status" property="betStatus" jdbcType="INTEGER"/>
        <result column="backwater_status" property="backwaterStatus" jdbcType="INTEGER"/>
        <result column="share_order_status" property="shareOrderStatus" jdbcType="INTEGER"/>
        <result column="logintype" property="logintype" jdbcType="DECIMAL"/>
        <result column="openId" property="openid" jdbcType="VARCHAR"/>
        <result column="sitearea" property="sitearea" jdbcType="VARCHAR"/>
        <result column="wechat" property="wechat" jdbcType="VARCHAR"/>
        <result column="chatnickname" property="chatnickname" jdbcType="VARCHAR"/>
        <result column="forbid_talk_type" property="forbidTalkType" jdbcType="INTEGER"/>
        <result column="forbid_in_type" property="forbidInType" jdbcType="INTEGER"/>
        <result column="forbid_talk_start" property="forbidTalkStart" jdbcType="TIMESTAMP"/>
        <result column="forbid_talk_end" property="forbidTalkEnd" jdbcType="TIMESTAMP"/>
        <result column="forbid_in_start" property="forbidInStart" jdbcType="TIMESTAMP"/>
        <result column="forbid_in_end" property="forbidInEnd" jdbcType="TIMESTAMP"/>
        <result column="is_delete" property="isDelete" jdbcType="BIT"/>
        <result column="create_user" property="createUser" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_user" property="updateUser" jdbcType="VARCHAR"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <result column="cg_nickname" property="cgNickname" jdbcType="BIT"/>
        <result column="proxy_url" property="proxyUrl" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
		unique_id as uniqueId,memid, accno, nickname, memname, mobileno, sex, idcardtype, idcardno, idcardfront,
		idcardback, birthday, nationality, headimg, registerdate, recomcode, describes, tag,
		logincountry, memfeatures, memorgin, fansnum, goldnum, sitearea, wechat, chatnickname,
		is_delete as isDelete, create_user as createUser, create_time as createTime, update_user as updateUser, update_time as updateTime,
		no_withdrawal_amount as noWithdrawalAmount,pay_amount as payAmount,withdrawal_amount as withdrawalAmount,
		bet_amount as betAmount,
		logintype,forbid_talk_type,forbid_talk_start,forbid_talk_end,forbid_in_type,forbid_in_start,forbid_in_end
  	</sql>


    <!-- 根据邀请码 获取 对应的人 -->
    <select id="getUserByInvitecode" parameterType="java.lang.String" resultType="com.likes.common.mybatis.entity.MemBaseinfo">
		select m.accno,m.memid,m.memid, recomcode, unique_id as uniqueId, is_delete as isDelete from mem_baseinfo m where m.recomcode = #{recomcode}
		and m.is_delete = b'0'
	</select>

    <!-- 根据邀请码 获取 对应的人 查询 是否已经存在这个邀请人 保证 一人一码-->
    <select id="getUserByInvitecodeAll" parameterType="java.lang.String" resultType="com.likes.common.mybatis.entity.MemBaseinfo">
        select m.accno from mem_baseinfo m where m.recomcode = #{recomcode}
        <!-- and m.is_delete = b'0' -->
    </select>


    <select id="getUserByAccno" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        *
        from mem_baseinfo m where m.accno = #{accno} and m.is_delete = b'0'
    </select>

    <select id="getUserByPhone" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        *
        from mem_baseinfo m where m.mobileno = #{phone} and m.is_delete = b'0'
    </select>



    <select id="getOrderBetRecordAmount" parameterType="java.util.List" resultType="java.math.BigDecimal">
        SELECT ifnull(sum(o.bet_amount),0.00) from order_bet_record o
        where o.id in
        <foreach close=")" collection="list" index="index" item="s" open="(" separator=",">
            #{s}
        </foreach>
    </select>

    <select id="getOrderRobotRecordAmount" parameterType="java.util.List" resultType="java.math.BigDecimal">
        SELECT ifnull(sum(o.bet_amount),0.00) from order_robot_record o
        where o.id in
        <foreach close=")" collection="list" index="index" item="s" open="(" separator=",">
            #{s}
        </foreach>
    </select>
    <select id="getUserByAccnoForSources" parameterType="java.lang.String" resultMap="BaseResultMap">
		select
		*
		from mem_baseinfo m where m.accno = #{accno}
	</select>

    <!-- 更新粉丝数 -->

    <update id="updateFansNum" parameterType="com.likes.common.model.request.UsersRequest">
        update mem_baseinfo
        <set>
            <!-- 收藏 -->
            <if test="isattention == 0 ">
                <!-- fansnum = IFNULL(fansnum,1) - 1, -->
                <![CDATA[  fansnum = IF(fansnum <= 0,1,fansnum) - 1, ]]>
            </if>
            <if test="isattention == 1 ">
                fansnum = IFNULL(fansnum,0) + 1,
            </if>

        </set>
        where memid = #{memid,jdbcType=BIGINT}
        and fansnum &gt;= 0
    </update>

    <!--<select id="getAttentionnum" parameterType="java.lang.String" resultType="java.lang.Integer">-->
    <!--SELECT COUNT(1) AS attentionnum -->
    <!--FROM mem_follow mf -->
    <!--INNER JOIN mem_baseinfo mb-->
    <!--on mf.accno = mb.accno -->
    <!--WHERE -->
    <!--mb.accno = #{accno} AND mb.is_delete = b'0'-->
    <!--and mf.memid is NOT NULL and mf.is_delete = b'0'-->

    <!--</select>-->

    <!--<select id="getCollectionnum" parameterType="java.lang.String" resultType="java.lang.Integer">-->
    <!--SELECT COUNT(1) as collectionnum-->
    <!--FROM bas_favorites bf INNER JOIN 	bas_video bv ON bf.videoid = bv.videoid-->
    <!--WHERE  bf.accno =#{accno}-->
    <!--and bf.is_delete = b'0'-->
    <!--AND bv.is_delete = b'0'-->
    <!--AND bv.checkstatus = 8-->
    <!--</select>-->

    <select id="getResourcesnum" parameterType="java.lang.String" resultType="java.lang.Integer">
	SELECT COUNT(1) as resourcesnum FROM bas_video bv  WHERE bv.accno = #{accno} AND bv.is_delete = b'0' AND bv.checkstatus = 8
	</select>

    <update id="updateAddGold" parameterType="com.likes.common.model.request.UsersRequest">
	 	update mem_baseinfo
    	set goldnum = IFNULL(goldnum,0) + #{goldnum,jdbcType=BIGINT},no_withdrawal_amount = no_withdrawal_amount + #{goldnum,jdbcType=BIGINT},
    	pay_amount = IFNULL(pay_amount,0) + #{goldnum,jdbcType=BIGINT}
    	where
    	accno = #{accno,jdbcType=VARCHAR}
	</update>

    <update id="updateMemBalance">
	 	update mem_baseinfo
    	set goldnum = IFNULL(goldnum,0) + #{amount,jdbcType=BIGINT},no_withdrawal_amount = no_withdrawal_amount + #{namount,jdbcType=BIGINT},
    	pay_amount = IFNULL(pay_amount,0) + #{payamount,jdbcType=BIGINT}
    	where
    	accno = #{accno,jdbcType=VARCHAR}
	</update>

    <update id="updateSubtractGold" parameterType="com.likes.common.model.request.UsersRequest">
        update mem_baseinfo
        set goldnum = goldnum - #{goldnum,jdbcType=BIGINT}
        <if test="noWithdrawalAmount != null  and  noWithdrawalAmount != '' ">
            ,no_withdrawal_amount = if( no_withdrawal_amount - #{noWithdrawalAmount,jdbcType=BIGINT} &lt; 0 , 0, no_withdrawal_amount - #{noWithdrawalAmount,jdbcType=BIGINT} )
        </if>
        <if test="consumeAmount != null  and  consumeAmount != '' ">
            ,consume_amount= consume_amount+#{consumeAmount}
        </if>
        where
        memid = #{memid,jdbcType=BIGINT}
        AND goldnum &gt;= #{goldnum,jdbcType=BIGINT}
    </update>

    <select id="getUserRecomcodeGold" parameterType="java.lang.String" resultType="com.likes.common.model.dto.member.UserGoldDO">
		SELECT
		(SELECT mr.refaccno FROM mem_relationship mr WHERE mr.accno = #{accno}
		AND  mr.is_delete = b'0'  LIMIT 1) as refaccno,
		(SELECT mr.relaid FROM mem_relationship mr WHERE mr.accno = #{accno}
		AND  mr.is_delete = b'0'  LIMIT 1) as relaid,
		(SELECT mg.goldchangid FROM mem_goldchange mg WHERE
		 mg.refid in (SELECT mr.relaid FROM mem_relationship mr WHERE mr.accno = #{accno} AND  mr.is_delete = b'0'  )
		 AND mg.is_delete = b'0'
		 AND mg.accno in (SELECT mr.refaccno FROM mem_relationship mr WHERE mr.accno = #{accno} AND  mr.is_delete = b'0'  )
		 AND mg.changetype = 7
		) as goldchangid

		from mem_baseinfo mb
		WHERE mb.accno = #{accno}
		AND mb.is_delete = b'0'
	</select>


    <update id="updateAddress" parameterType="com.likes.common.mybatis.entity.MemBaseinfo">
		update mem_baseinfo
		set tag = #{tag},logincountry = #{logincountry}
		where accno = #{accno}
	</update>


    <select id="getRepeateNickname" parameterType="java.lang.String" resultMap="BaseResultMap">
		SELECT * from mem_baseinfo mb
		where mb.nickname = #{nickname}
		and is_delete = b'0'
		limit 1
	</select>


    <select id="findUsers" parameterType="com.likes.common.model.dto.member.UserDO" resultType="com.likes.common.model.dto.member.UserDO">
		SELECT m.mobileno,m.nickname,m.accno
		FROM mem_baseinfo m
		INNER JOIN mem_login l ON m.accno = l.accno AND l.accstatus = 1
		WHERE m.is_delete = b'0'
		AND l.logintype IN (1,2,7)
		AND
		( m.mobileno LIKE CONCAT('%',#{nickname,jdbcType=VARCHAR},'%')
    		OR
			 m.nickname LIKE CONCAT('%',#{nickname,jdbcType=VARCHAR},'%')
			 OR
			  m.memname LIKE CONCAT('%',#{nickname,jdbcType=VARCHAR},'%')
    		)
		LIMIT 15
	</select>

    <select id="findAllUsers" resultType="com.likes.common.model.dto.member.UserDO">
		SELECT m.mobileno,m.nickname,m.accno
		FROM mem_baseinfo m
		INNER JOIN mem_login l ON m.accno = l.accno AND l.accstatus = 1
		WHERE m.is_delete = b'0'
		AND l.logintype IN (1,2,7)
	</select>

    <select id="applyAnchorList" parameterType="com.likes.common.model.request.UserRequest" resultType="com.likes.common.model.dto.member.MemBaseinfoDO">
        SELECT mb.*
        FROM mem_baseinfo mb
        INNER JOIN mem_certification mc ON mc.accno = mb.accno
        WHERE mb.is_delete = b'0' AND mc.is_delete = b'0'
        AND mc.certstatus = 1
        <if test="username != null  and  username != '' ">
            and
            (
            mb.nickname like CONCAT('%',#{username},'%')
            or
            mb.memname like CONCAT('%',#{username},'%')
            or
            mb.mobileno like CONCAT('%',#{username},'%')
            )
        </if>
        ORDER BY mc.update_time ASC
    </select>

    <update id="updatePayAgent" parameterType="com.likes.common.mybatis.entity.TraAgentclearing">
    update mem_baseinfo mb
    set mb.goldnum = (mb.goldnum + #{reverseamt,jdbcType=DECIMAL}),
    update_user = #{accno,jdbcType=VARCHAR}
    where mb.is_delete = b'0'
    and mb.accno = #{accno,jdbcType=VARCHAR}
  </update>

    <select id="selectByAccno" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from mem_baseinfo
        where accno = #{accno}
        and is_delete = b'0'
    </select>

    <select id="getNickNameList" resultType="java.lang.String">
        select nickname
        from mem_baseinfo
        where accno in
        <foreach close=")" collection="array" index="index" item="s" open="(" separator=",">
            #{s}
        </foreach>
        and is_delete = b'0'
    </select>

    <select id="getGpList" resultType="com.likes.common.model.GreatPersonList">
        <!-- 时时彩未开奖投注 -->
        select t.nickname,ml.memlevel,t.headimg, t.totalnums, t.lucknums, TRUNCATE(t.lucknums / t.totalnums,2) as luckrage,
        los.period, lok.lotname, lor.rulename, trod.orderid, IF(lok.lotname LIKE "%三%",(3-DATE_FORMAT(now(),'%i')%3)*60-DATE_FORMAT(now(),'%s'),60-DATE_FORMAT(now(),'%s'))as endsecond
        from(
        select m.nickname,m.headimg,m.accno,sum(m.totalnums) as totalnums,sum(m.lucknums) as lucknums
        from (
        select mb.nickname,mb.headimg, tod.accno,count(ls.sscorderid)as totalnums, (select
        count(*) from lot_sscorder lss
        INNER JOIN tra_orderinfom todd on
        lss.orderid = todd.orderid where lss.is_delete = b'0' and lss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from lot_sscorder ls
        Inner join tra_orderinfom tod on tod.orderid = ls.orderid
        inner join mem_baseinfo mb on mb.accno = tod.accno
        where ls.is_delete = b'0' GROUP BY tod.accno
        UNION all
        select mb.nickname,mb.headimg, tod.accno,count(qs.ksorderid)as totalnums, (select
        count(*) from quick_sscorder qss
        INNER JOIN tra_orderinfom todd on
        qss.orderid = todd.orderid where qss.is_delete = b'0' and qss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from quick_sscorder qs
        Inner join tra_orderinfom tod on tod.orderid = qs.orderid
        inner join mem_baseinfo mb on mb.accno = tod.accno
        where qs.is_delete = b'0' GROUP BY tod.accno
        )m
        group by m.accno
        )t
        INNER JOIN tra_orderinfom trod on trod.accno = t.accno and trod.is_delete = b'0' and trod.orderstatus = 'ord08'
        inner join lot_sscorder ltss on ltss.orderid = trod.orderid and ltss.status = 0
        Inner join mem_level ml on ml.accno = t.accno and ml.is_delete = b'0'
        inner join lot_sschistory los on ltss.sschistoryid = los.sschistoryid
        inner join lot_kindinfo lok on lok.lotkindid = los.lotkindid
        inner join lot_oddsset ldd on FIND_IN_SET(ldd.oddsid,ltss.oddsids)
        inner join lot_ruleinfo lor on ldd.lotruleid = lor.lotruleid
        where TRUNCATE(t.lucknums / t.totalnums,2) &gt;=
        IFNULL((select sysparamvalue from sys_parameter where sysparamcode = 'gp_luckrate' and is_delete = b'0' and status =0 ),0.20)
        GROUP BY trod.accno
        <!-- 快3未开奖投注 -->
        UNION all
        select t.nickname,ml.memlevel,t.headimg, t.totalnums, t.lucknums, TRUNCATE(t.lucknums / t.totalnums,2) as luckrage,
        qos.period, lok.lotname, lor.rulename, trod.orderid, IF(lok.lotname LIKE "%三分快%",(3-DATE_FORMAT(now(),'%i')%3)*60-DATE_FORMAT(now(),'%s'),60-DATE_FORMAT(now(),'%s'))as endsecond
        from(
        select m.nickname,m.headimg,m.accno,sum(m.totalnums) as totalnums,sum(m.lucknums) as lucknums
        from (
        select mb.nickname,mb.headimg, tod.accno,count(ls.sscorderid)as totalnums, (select
        count(*) from lot_sscorder lss
        INNER JOIN tra_orderinfom todd on
        lss.orderid = todd.orderid where lss.is_delete = b'0' and lss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from lot_sscorder ls
        Inner join tra_orderinfom tod on tod.orderid = ls.orderid
        inner join mem_baseinfo mb on mb.accno = tod.accno
        where ls.is_delete = b'0' GROUP BY tod.accno
        UNION all
        select mb.nickname,mb.headimg, tod.accno,count(qs.ksorderid)as totalnums, (select
        count(*) from quick_sscorder qss
        INNER JOIN tra_orderinfom todd on
        qss.orderid = todd.orderid where qss.is_delete = b'0' and qss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from quick_sscorder qs
        Inner join tra_orderinfom tod on tod.orderid = qs.orderid
        inner join mem_baseinfo mb on mb.accno = tod.accno
        where qs.is_delete = b'0' GROUP BY tod.accno
        )m
        group by m.accno
        )t
        INNER JOIN tra_orderinfom trod on trod.accno = t.accno and trod.is_delete = b'0' and trod.orderstatus = 'ord08'
        inner join quick_sscorder qtss on qtss.orderid = trod.orderid and qtss.status = 0
        Inner join mem_level ml on ml.accno = t.accno and ml.is_delete = b'0'
        inner join quick_sschistory qos on qtss.kshistoryid = qos.kshistoryid
        inner join lot_kindinfo lok on lok.lotkindid = qos.lotkindid
        inner join lot_oddsset ldd on FIND_IN_SET(ldd.oddsid,qtss.oddsids)
        inner join lot_ruleinfo lor on ldd.lotruleid = lor.lotruleid
        where TRUNCATE(t.lucknums / t.totalnums,2) &gt;=
        IFNULL((select sysparamvalue from sys_parameter where sysparamcode = 'gp_luckrate' and is_delete = b'0' and status =0 ),0.20)
        GROUP BY trod.accno
        <!-- 时时彩已结束投注 -->
        UNION all
        select t.nickname,ml.memlevel,t.headimg, t.totalnums, t.lucknums, TRUNCATE(t.lucknums / t.totalnums,2) as luckrage,
        los.period, lok.lotname, lor.rulename, trod.orderid, 0 as endsecond
        from(
        select m.nickname,m.headimg,m.accno,sum(m.totalnums) as totalnums,sum(m.lucknums) as lucknums
        from (
        select mb.nickname,mb.headimg, tod.accno,count(ls.sscorderid)as totalnums, (select
        count(*) from lot_sscorder lss
        INNER JOIN tra_orderinfom todd on
        lss.orderid = todd.orderid where lss.is_delete = b'0' and lss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from lot_sscorder ls
        Inner join tra_orderinfom tod on tod.orderid = ls.orderid
        inner join mem_baseinfo mb on mb.accno = tod.accno
        where ls.is_delete = b'0' GROUP BY tod.accno
        UNION all
        select mb.nickname,mb.headimg, tod.accno,count(qs.ksorderid)as totalnums, (select
        count(*) from quick_sscorder qss
        INNER JOIN tra_orderinfom todd on
        qss.orderid = todd.orderid where qss.is_delete = b'0' and qss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from quick_sscorder qs
        Inner join tra_orderinfom tod on tod.orderid = qs.orderid
        inner join mem_baseinfo mb on mb.accno = tod.accno
        where qs.is_delete = b'0' GROUP BY tod.accno
        )m
        group by m.accno
        )t
        INNER JOIN tra_orderinfom trod on trod.accno = t.accno and trod.is_delete = b'0' and trod.orderstatus = 'ord08'
        inner join lot_sscorder ltss on ltss.orderid = trod.orderid and ltss.status != 0
        Inner join mem_level ml on ml.accno = t.accno and ml.is_delete = b'0'
        inner join lot_sschistory los on ltss.sschistoryid = los.sschistoryid
        inner join lot_kindinfo lok on lok.lotkindid = los.lotkindid
        inner join lot_oddsset ldd on FIND_IN_SET(ldd.oddsid,ltss.oddsids)
        inner join lot_ruleinfo lor on ldd.lotruleid = lor.lotruleid
        where TRUNCATE(t.lucknums / t.totalnums,2) &gt;=
        IFNULL((select sysparamvalue from sys_parameter where sysparamcode = 'gp_luckrate' and is_delete = b'0' and status =0 ),0.20)
        GROUP BY trod.accno
        <!-- 快3已结束投注 -->
        UNION all
        select t.nickname,ml.memlevel,t.headimg, t.totalnums, t.lucknums, TRUNCATE(t.lucknums / t.totalnums,2) as luckrage,
        qos.period, lok.lotname, lor.rulename, trod.orderid, 0 as endsecond
        from(
        select m.nickname,m.headimg,m.accno,sum(m.totalnums) as totalnums,sum(m.lucknums) as lucknums
        from (
        select mb.nickname,mb.headimg, tod.accno,count(ls.sscorderid)as totalnums, (select
        count(*) from lot_sscorder lss
        INNER JOIN tra_orderinfom todd on
        lss.orderid = todd.orderid where lss.is_delete = b'0' and lss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from lot_sscorder ls
        Inner join tra_orderinfom tod on tod.orderid = ls.orderid
        inner join mem_baseinfo mb on mb.accno = tod.accno
        where ls.is_delete = b'0' GROUP BY tod.accno
        UNION all
        select mb.nickname,mb.headimg, tod.accno,count(qs.ksorderid)as totalnums, (select
        count(*) from quick_sscorder qss
        INNER JOIN tra_orderinfom todd on
        qss.orderid = todd.orderid where qss.is_delete = b'0' and qss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from quick_sscorder qs
        Inner join tra_orderinfom tod on tod.orderid = qs.orderid
        inner join mem_baseinfo mb on mb.accno = tod.accno
        where qs.is_delete = b'0' GROUP BY tod.accno
        )m
        group by m.accno
        )t
        INNER JOIN tra_orderinfom trod on trod.accno = t.accno and trod.is_delete = b'0' and trod.orderstatus = 'ord08'
        inner join quick_sscorder qtss on qtss.orderid = trod.orderid and qtss.status != 0
        Inner join mem_level ml on ml.accno = t.accno and ml.is_delete = b'0'
        inner join quick_sschistory qos on qtss.kshistoryid = qos.kshistoryid
        inner join lot_kindinfo lok on lok.lotkindid = qos.lotkindid
        inner join lot_oddsset ldd on FIND_IN_SET(ldd.oddsid,qtss.oddsids)
        inner join lot_ruleinfo lor on ldd.lotruleid = lor.lotruleid
        where TRUNCATE(t.lucknums / t.totalnums,2) &gt;=
        IFNULL((select sysparamvalue from sys_parameter where sysparamcode = 'gp_luckrate' and is_delete = b'0' and status =0 ),0.20)
        GROUP BY trod.accno

        order by orderid desc
    </select>

    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from mem_baseinfo
        where memid = #{memId}
        and is_delete = b'0'
    </select>
    <select id="countAllBalanceAmount" resultType="java.math.BigDecimal">
        select sum(balance) from mem_baseinfo
        where 1=1
        <if test="null != startTime">
            and create_time <![CDATA[ >= ]]> #{startTime}
        </if>
        <if test="null != endTime">
            and create_time <![CDATA[ <= ]]> #{endTime}
        </if>
    </select>
    <update id="updatePersonalFinancialInfo">
        UPDATE mem_baseinfo m
        SET m.goldnum = (
          CASE
          WHEN  m.goldnum + #{amount} <![CDATA[ < ]]> 0 THEN
          0
          WHEN m.goldnum + #{amount} <![CDATA[ >= ]]> 0 THEN
          m.goldnum + #{amount}
          END
        ),
         m.wait_amount = (
            CASE
            WHEN m.wait_amount + #{waitamount} <![CDATA[ < ]]> 0 THEN
                0
            WHEN m.wait_amount + #{waitamount} <![CDATA[ >= ]]> 0 THEN
                m.wait_amount + #{waitamount}
            END
        ),
         m.pay_amount = m.pay_amount + #{pamount},
         m.bet_amount = m.bet_amount + #{bamount},
         m.no_withdrawal_amount = (
            CASE
            WHEN m.no_withdrawal_amount + #{namount}  <![CDATA[ > ]]> 0 THEN
                m.no_withdrawal_amount + #{namount}
            WHEN m.no_withdrawal_amount + #{namount} <![CDATA[ <= ]]> 0 THEN
                0
            END
        ),
        m.consume_amount = (
            CASE
            WHEN m.consume_amount + #{consumeAcmount}  <![CDATA[ > ]]> 0 THEN
                m.consume_amount + #{consumeAcmount}
            WHEN m.consume_amount + #{consumeAcmount} <![CDATA[ <= ]]> 0 THEN
                0
            END
        ),
         m.withdrawal_amount = m.withdrawal_amount + #{wamount}
        WHERE
            m.accno = #{accno}

    </update>
    <update id="updateMemberAmount" parameterType="java.util.Map">
            UPDATE mem_baseinfo m
            SET m.goldnum = (
              CASE
              WHEN  m.goldnum + #{amount} <![CDATA[ < ]]> 0 THEN
              0
              WHEN m.goldnum + #{amount} <![CDATA[ >= ]]> 0 THEN
              m.goldnum + #{amount}
              END
            ),
             m.wait_amount = (
                CASE
                WHEN m.wait_amount + #{waitamount} <![CDATA[ < ]]> 0 THEN
                    0
                WHEN m.wait_amount + #{waitamount} <![CDATA[ >= ]]> 0 THEN
                    m.wait_amount + #{waitamount}
                END
            ),
             m.pay_amount = m.pay_amount + #{pamount},
             m.bet_amount = m.bet_amount + #{bamount},
             m.no_withdrawal_amount = (
                CASE
                WHEN m.no_withdrawal_amount + #{namount}  <![CDATA[ > ]]> 0 THEN
                    m.no_withdrawal_amount + #{namount}
                WHEN m.no_withdrawal_amount + #{namount} <![CDATA[ <= ]]> 0 THEN
                    0
                END
            ),
             m.withdrawal_amount = m.withdrawal_amount + #{wamount}
            WHERE
                m.accno = #{accno}
	</update>


    <update id="updateMemberForbit" parameterType="com.likes.common.mybatis.entity.MemBaseinfo">
        update mem_baseinfo
        set forbid_talk_type = #{forbidTalkType,jdbcType=INTEGER},
        forbid_talk_start = #{forbidTalkStart,jdbcType=TIMESTAMP},
        forbid_talk_end = #{forbidTalkEnd,jdbcType=TIMESTAMP},
        forbid_in_type = #{forbidInType,jdbcType=INTEGER},
        forbid_in_start = #{forbidInStart,jdbcType=TIMESTAMP},
        forbid_in_end = #{forbidInEnd,jdbcType=TIMESTAMP},
        update_time=NOW()
        <if test="updateUser != null  and  updateUser != '' ">
            ,update_user = #{updateUser}
        </if>
        where memid = #{memid,jdbcType=BIGINT}
    </update>

    <select id="countFirstDepositAmount" parameterType="com.likes.common.model.vo.ProfitAndLossCountVO" resultType="java.math.BigDecimal">
        SELECT IFNULL(sum(o.amount),0.00) FROM mem_goldchange o where o.changetype =1 and o.is_delete = 0 ${time}
        and o.goldchangid IN
        <foreach close=")" collection="list" index="index" item="s" open="(" separator=",">
            #{s}
        </foreach>
    </select>

    <update id="updateWithdrawalAmount" parameterType="com.likes.common.mybatis.entity.MemBaseinfo">
        update mem_baseinfo m
        set m.withdrawal_amount = m.withdrawal_amount + IFNULL(#{withdrawalAmount},0) ,
        m.withdrawal_num =IFNULL(m.withdrawal_num,0) + 1 ,
        <if test="withdrawalMax != null">
            m.withdrawal_max = ${withdrawalMax},
        </if>
        <if test="withdrawalFirst != null">
            m.withdrawal_first = ${withdrawalFirst},
        </if>
        m.update_time = SYSDATE(),
        m.update_user = #{updateUser}
        where m.accno =#{accno}
    </update>

    <select id="getMemInfoStatusList" parameterType="com.likes.common.model.dto.bas.BasMemInfoStatusReq"
            resultType="com.likes.common.model.dto.bas.BasMemInfoStatusResp">
        SELECT id, nickname,uniqueId, accno, memname, displaystatus, startdate, enddate, roomname, anchoraccno, `type`, mobileno, updateuser, updatetime
        FROM ( SELECT m.memid as id,m.unique_id as uniqueId, m.nickname, m.accno, m.memname, '全局禁言' as displaystatus,
        m.forbid_talk_start as startdate, m.forbid_talk_end as enddate, '' as roomname, '' as anchoraccno,
        ( CASE m.forbid_talk_type
        WHEN 1 THEN '1'
        WHEN 2 THEN '2'
        ELSE '未知' END ) as `type`,
        m.mobileno, m.update_user as updateuser, m.update_time as updatetime
        FROM mem_baseinfo m
        WHERE m.is_delete = 0
        AND m.forbid_talk_type in (1,2)
        <![CDATA[ AND (IF(m.forbid_talk_type = 1 , m.forbid_talk_end > NOW(), 1 = 1)) ]]>
        UNION ALL
        SELECT m.memid as id,m.unique_id as uniqueId, m.nickname, m.accno, m.memname, '全局禁入' as displaystatus,
        m.forbid_in_start as startdate, m.forbid_in_end as enddate, '' as roomname, '' as anchoraccno,
        ( CASE m.forbid_in_type
        WHEN 1 THEN '3'
        WHEN 2 THEN '4'
        ELSE '未知' END ) as `type`,
        m.mobileno, m.update_user as updateuser, m.update_time as updatetime
        FROM mem_baseinfo m
        WHERE m.is_delete = 0
        AND m.forbid_in_type in (1,2)
        <![CDATA[ AND (IF(m.forbid_in_type = 1 , m.forbid_in_end > NOW(), 1 = 1)) ]]>
        ) b
        WHERE 1 = 1
        <if test="typeLists != null and typeLists.size()>0">
            AND `type` in
            <foreach close=")" collection="typeLists" index="index" item="s" open="(" separator=",">
                #{s}
            </foreach>
        </if>
        <if test="mobileno != null and mobileno != ''">
            AND mobileno = #{mobileno,jdbcType=VARCHAR}
        </if>
        <if test="roomname != null and roomname != ''">
            AND roomname = #{roomname,jdbcType=VARCHAR}
        </if>
        <if test="anchoraccno != null and anchoraccno != ''">
            AND anchoraccno = #{anchoraccno,jdbcType=VARCHAR}
        </if>
        <if test="uniqueId != null and uniqueId != ''">
            AND unique_id = #{uniqueId,jdbcType=VARCHAR}
        </if>
        ORDER BY accno
    </select>

    <update id="updateMemUniqueId" parameterType="java.util.Map">
        <foreach collection="data" index="memid" item="value">
            update mem_baseinfo set unique_id = #{value,jdbcType=VARCHAR} where memid=#{memid,jdbcType=BIGINT};
        </foreach>
    </update>

    <select id="getNicknameSexHeadimg" resultType="java.util.Map">
        SELECT mb.accno, mb.nickname, mb.sex, mb.headimg
        FROM mem_baseinfo mb
        WHERE mb.accno in
        <foreach collection="accnoList" item="accnoItem" open="(" close=")" separator=",">
            #{accnoItem}
        </foreach>
    </select>

    <select id="selectByUniqueId" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
            *
        from mem_baseinfo
        where unique_id = #{memaccount}
        and is_delete = b'0'
    </select>
    <select id="selectUniqueIdByAccno" resultType="java.lang.String">
        select
        unique_id
        from mem_baseinfo
        where accno = #{accno}
        and is_delete = b'0'

    </select>
    <select id="countAllUserAmount" resultType="java.math.BigDecimal">
        select
        sum(goldnum)
        from mem_baseinfo
        where is_delete = b'0'
    </select>

    <select id="getReport" parameterType="com.likes.common.model.request.MemberReportRequest" resultType="com.likes.common.model.dto.member.MemberReportDTO">
        SELECT
        mr.*,
        mb.mobileno,mb.nickname,mb.memname,
        refmb.mobileno as refmobileno,refmb.nickname as refnickname,refmb.memname as refmemname,
        ml.memlevel as levelname,ml.level_config_id as levelid
        from mem_report mr
        INNER JOIN mem_baseinfo mb on mb.accno = mr.accno  COLLATE utf8mb4_unicode_ci
        LEFT JOIN mem_baseinfo refmb on refmb.accno = mr.refaccno  COLLATE utf8mb4_unicode_ci
        LEFT JOIN mem_level ml on ml.accno = mr.accno  COLLATE utf8mb4_unicode_ci
        where
        isdelete = 0
        <if test="rechargenum != null and rechargenum &lt; 11">
            AND mr.rechargenum = #{rechargenum}
        </if>
        <if test="rechargenum != null and rechargenum &gt;= 11">
            AND mr.rechargenum &gt;= #{rechargenum}
        </if>
        <if test="type != null and type = 2 and keywords !=null and keywords != '' ">
            AND (
            refmb.mobileno LIKE CONCAT('%',#{keywords},'%')
            or refmb.memname LIKE CONCAT('%',#{keywords},'%')
            or refmb.nickname LIKE CONCAT('%',#{keywords},'%')
            )
        </if>
        <if test="type != null and type = 1 and keywords !=null and keywords != ''">
            AND (
                mb.mobileno LIKE CONCAT('%',#{keywords},'%')
                or mb.memname LIKE CONCAT('%',#{keywords},'%')
                or mb.nickname LIKE CONCAT('%',#{keywords},'%')
            )
        </if>
        <if test="startTime != null">
            AND mr.lastupdatetime &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            AND mr.lastupdatetime &lt;= #{endTime}
        </if>
    </select>

    <select id="findAllUsersDate" resultType="Map">
        SELECT
            IFNULL( jrzc, 0 ) AS jrzc,
            IFNULL( zrzc, 0 ) AS zrzc,
            IFNULL( byzc, 0 ) AS byzc,
            IFNULL( zzc, 0 ) AS zzc
        FROM
        (
            ( SELECT count( 1 ) AS jrzc FROM mem_baseinfo WHERE 1=1 and create_time BETWEEN #{jtBeginTime} AND #{jtEnDTime} ) AS jrz,
            ( SELECT count( 1 ) AS zrzc FROM mem_baseinfo WHERE 1=1 and create_time BETWEEN #{ztBeginTime} AND #{ztEnDTime} ) AS zrz,
            ( SELECT count( 1 ) AS byzc FROM mem_baseinfo WHERE 1=1 and create_time BETWEEN #{byBeginTime} AND #{byEnDTime} ) AS byz,
            ( SELECT count( 1 ) AS zzc FROM mem_baseinfo WHERE 1=1 ) AS zz
        )
	</select>



</mapper>
