<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.likes.common.mybatis.mapperext.member.MemLevelMapperExt">
    <resultMap id="BaseResultMap" type="com.likes.common.mybatis.entity.MemLevel">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="levelid" jdbcType="BIGINT" property="levelid"/>
        <id column="is_delete" jdbcType="BIT" property="isDelete"/>
        <result column="accno" jdbcType="VARCHAR" property="accno"/>
        <result column="memlevel" jdbcType="VARCHAR" property="memlevel"/>
        <result column="memscore" jdbcType="DECIMAL" property="memscore"/>
        <result column="nextlevscore" jdbcType="DECIMAL" property="nextlevscore"/>
        <result column="levellog" jdbcType="VARCHAR" property="levellog"/>
        <result column="locked" jdbcType="BIT" property="locked"/>
        <result column="create_user" jdbcType="VARCHAR" property="createUser"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_user" jdbcType="VARCHAR" property="updateUser"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="expire_time" jdbcType="TIMESTAMP" property="expireTime"/>
        <result column="level_config_id" jdbcType="BIGINT" property="levelConfigId"/>
    </resultMap>
    <sql id="Base_Column_List">
        levelid
        , accno, memlevel, memscore, nextlevscore, levellog, is_delete, create_user, create_time, update_user, update_time,locked,expire_time,level_config_id
    </sql>


    <select id="selectByAccno" parameterType="java.lang.String" resultType="com.likes.common.mybatis.entity.MemLevel">
        select ml.levelid         as levelid,
               ml.is_delete       as isDelete,
               ml.accno           as accno,
               ml.memlevel        as memlevel,
               ml.memscore        as memscore,
               ml.nextlevscore    as nextlevscore,
               ml.levellog        as levellog,
               ml.locked          as locked,
               ml.create_user     as createUser,
               ml.create_time     as createTime,
               ml.update_user     as updateUser,
               ml.update_time     as updateTime,
               ml.expire_time     as expireTime,
               ml.level_config_id as levelConfigId
        from mem_level ml
                 INNER JOIN mem_level_config mlc on ml.level_config_id = mlc.id
        where ml.accno = #{accno}
          and ml.expire_time &gt; SYSDATE()
        order by ml.create_time DESC
        limit 1
    </select>


    <update id="updateMemscore" parameterType="com.likes.common.model.request.GiftReq">
        update mem_level
        set memscore = memscore + #{gold}
        where accno = #{sendAccno}
          and is_delete = b'0'
    </update>


    <update id="updateLevel" parameterType="com.likes.common.mybatis.entity.MemLevel">
        update mem_level
        set memlevel     = #{memlevel},
            nextlevscore = #{nextlevscore},
            memscore     = #{memscore},
            update_user  = #{updateUser}
        where accno = #{accno}
          and is_delete = b'0'
    </update>

    <select id="getMemberVipLst" parameterType="com.likes.common.model.request.MemberVIPRequest"
            resultType="com.likes.common.model.dto.member.MemberVipDTO">
        SELECT
        ml.memlevel,ml.create_time as createtime,ml.expire_time as expiretime,ml.locked,
        mb.accno,mb.memid,mb.unique_id as uniqueid,mb.mobileno,mb.recomcode
        from
        (
        select * from mem_level where levelid in(
        select max(levelid) from mem_level where is_delete = 0 group by accno
        )
        ) ml
        INNER JOIN mem_baseinfo mb on mb.accno = ml.accno COLLATE utf8mb4_unicode_ci
        INNER JOIN mem_level_config mlc on mlc.id = ml.level_config_id and mlc.recharge_amount > 0
        where mb.is_delete = 0 and mlc.is_delete = 0
        <if test="accountname != null  and  accountname != '' ">
            and mb.mobileno like CONCAT('%',#{accountname},'%')
        </if>
        <if test="startTime != null and endTime != null  ">
            and ml.create_time BETWEEN #{startTime} and #{endTime}
        </if>
    </select>


    <select id="getMemberCountLevel" parameterType="java.lang.String"
            resultType="com.likes.common.model.dto.member.MemberCountDTO">
        SELECT mlc.id,
               mlc.`level`,
               recharge_amount,

               (SELECT count(0)
                FROM (SELECT MAX(levelid)         AS levelid,
                             level_config_id as level_config_id,
                             accno
                      FROM mem_level
                      WHERE is_delete = 0
                        AND expire_time > NOW()
                        and create_time &gt; #{date}
                      GROUP BY accno) ml
                WHERE ml.level_config_id = mlc.id) AS memnum
        FROM mem_level_config mlc
        ORDER BY level_seq ASC

    </select>
    <select id="getMemberCountLevelBefor" parameterType="java.lang.String"
            resultType="com.likes.common.model.dto.member.MemberCountDTO">
        SELECT mlc.id,
               mlc.`level`,
               recharge_amount,

               (SELECT count(0)
                FROM (SELECT MAX(levelid)         AS levelid,
                             level_config_id as level_config_id,
                             accno
                      FROM mem_level
                      WHERE is_delete = 0
                        AND expire_time > NOW()

                      GROUP BY accno) ml
                WHERE ml.level_config_id = mlc.id) AS memnum
        FROM mem_level_config mlc
        ORDER BY level_seq ASC
    </select>
    <select id="getMiniLevelByAccno" resultMap="BaseResultMap">
        select ml.*
        from mem_level ml
                 INNER join mem_level_config mlc on ml.level_config_id = mlc.id
        where ml.accno = #{accno}
        ORDER BY mlc.level_seq asc limit 1
    </select>
    <select id="getByAccnoAndLevelId" resultType="com.likes.common.mybatis.entity.MemLevel">
        select ml.levelid         as levelid,
               ml.is_delete       as isDelete,
               ml.accno           as accno,
               ml.memlevel        as memlevel,
               ml.memscore        as memscore,
               ml.nextlevscore    as nextlevscore,
               ml.levellog        as levellog,
               ml.locked          as locked,
               ml.create_user     as createUser,
               ml.create_time     as createTime,
               ml.update_user     as updateUser,
               ml.update_time     as updateTime,
               ml.expire_time     as expireTime,
               ml.level_config_id as levelConfigId
        from mem_level ml
        where ml.accno = #{accno}
          and ml.level_config_id = #{id} limit 1
    </select>
    <select id="checkUserMemberLevelExpire" resultType="java.lang.Integer">
        select count(1)
        from mem_level ml
                 INNER JOIN mem_level_config mlc on ml.level_config_id = mlc.id and mlc.level_seq = #{levelSeq}
        where ml.accno = #{accno}
          and ml.expire_time > SYSDATE()
    </select>
</mapper>
