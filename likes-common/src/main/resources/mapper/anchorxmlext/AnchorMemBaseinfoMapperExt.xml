<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.likes.common.mybatis.mapperext.anchor.AnchorMemBaseinfoMapperExt">

    <resultMap id="BaseResultMap" type="com.likes.common.mybatis.entity.anchor.AnchorMemBaseinfo">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="memid" jdbcType="BIGINT" property="memid"/>
        <result column="accno" jdbcType="VARCHAR" property="accno"/>
        <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
        <result column="memname" jdbcType="VARCHAR" property="memname"/>
        <result column="mobileno" jdbcType="VARCHAR" property="mobileno"/>
        <result column="sex" jdbcType="DECIMAL" property="sex"/>
        <result column="idcardtype" jdbcType="VARCHAR" property="idcardtype"/>
        <result column="idcardno" jdbcType="VARCHAR" property="idcardno"/>
        <result column="idcardfront" jdbcType="VARCHAR" property="idcardfront"/>
        <result column="idcardback" jdbcType="VARCHAR" property="idcardback"/>
        <result column="birthday" jdbcType="DATE" property="birthday"/>
        <result column="nationality" jdbcType="VARCHAR" property="nationality"/>
        <result column="headimg" jdbcType="VARCHAR" property="headimg"/>
        <result column="registerdate" jdbcType="TIMESTAMP" property="registerdate"/>
        <result column="recomcode" jdbcType="VARCHAR" property="recomcode"/>
        <result column="describes" jdbcType="VARCHAR" property="describes"/>
        <result column="tag" jdbcType="VARCHAR" property="tag"/>
        <result column="clintipadd" jdbcType="VARCHAR" property="clintipadd"/>
        <result column="logincountry" jdbcType="VARCHAR" property="logincountry"/>
        <result column="memfeatures" jdbcType="VARCHAR" property="memfeatures"/>
        <result column="memorgin" jdbcType="VARCHAR" property="memorgin"/>
        <result column="fansnum" jdbcType="BIGINT" property="fansnum"/>
        <result column="goldnum" jdbcType="DECIMAL" property="goldnum"/>
        <result column="wait_amount" jdbcType="DECIMAL" property="waitAmount"/>
        <result column="withdrawal_remainder" jdbcType="DECIMAL" property="withdrawalRemainder"/>
        <result column="bet_amount" jdbcType="DECIMAL" property="betAmount"/>
        <result column="pay_amount" jdbcType="DECIMAL" property="payAmount"/>
        <result column="withdrawal_amount" jdbcType="DECIMAL" property="withdrawalAmount"/>
        <result column="no_withdrawal_amount" jdbcType="DECIMAL" property="noWithdrawalAmount"/>
        <result column="chat_status" jdbcType="INTEGER" property="chatStatus"/>
        <result column="freeze_status" jdbcType="INTEGER" property="freezeStatus"/>
        <result column="bet_status" jdbcType="INTEGER" property="betStatus"/>
        <result column="backwater_status" jdbcType="INTEGER" property="backwaterStatus"/>
        <result column="share_order_status" jdbcType="INTEGER" property="shareOrderStatus"/>
        <result column="logintype" jdbcType="DECIMAL" property="logintype"/>
        <result column="openId" jdbcType="VARCHAR" property="openid"/>
        <result column="sitearea" jdbcType="VARCHAR" property="sitearea"/>
        <result column="wechat" jdbcType="VARCHAR" property="wechat"/>
        <result column="chatnickname" jdbcType="VARCHAR" property="chatnickname"/>
        <result column="is_delete" jdbcType="BIT" property="isDelete"/>
        <result column="create_user" jdbcType="VARCHAR" property="createUser"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_user" jdbcType="VARCHAR" property="updateUser"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="forbid_talk_type" jdbcType="INTEGER" property="forbidTalkType"/>
        <result column="forbid_in_type" jdbcType="INTEGER" property="forbidInType"/>
        <result column="forbid_talk_start" jdbcType="TIMESTAMP" property="forbidTalkStart"/>
        <result column="forbid_talk_end" jdbcType="TIMESTAMP" property="forbidTalkEnd"/>
        <result column="forbid_in_start" jdbcType="TIMESTAMP" property="forbidInStart"/>
        <result column="forbid_in_end" jdbcType="TIMESTAMP" property="forbidInEnd"/>
    </resultMap>

    <sql id="Base_Column_List">
		memid, accno, nickname, memname, mobileno, sex, idcardtype, idcardno, idcardfront, 
		idcardback, birthday, nationality, headimg, registerdate, recomcode, describes, tag, 
		logincountry, memfeatures, memorgin, fansnum, goldnum, sitearea, wechat, chatnickname, 
		is_delete as isDelete, create_user as createUser, create_time as createTime, update_user as updateUser, update_time as updateTime,
		no_withdrawal_amount as noWithdrawalAmount,pay_amount as payAmount,withdrawal_amount as withdrawalAmount,
		bet_amount as betAmount,
		logintype,forbid_talk_type,forbid_talk_start,forbid_talk_end,forbid_in_type,forbid_in_start,forbid_in_end
  	</sql>

    <!-- 根据邀请码 获取 对应的人 -->
    <select id="getUserByInvitecode" parameterType="java.lang.String" resultType="com.likes.common.mybatis.entity.anchor.AnchorMemBaseinfo">
		select m.accno, m.memid, is_delete as isDelete
		from anchor_mem_baseinfo m
		where m.recomcode = #{recomcode}
		and m.is_delete = b'0' 
	</select>

    <!-- 根据邀请码 获取 对应的人 查询 是否已经存在这个邀请人 保证 一人一码-->
    <select id="getUserByInvitecodeAll" parameterType="java.lang.String" resultType="com.likes.common.mybatis.entity.anchor.AnchorMemBaseinfo">
        select m.accno
        from anchor_mem_baseinfo m
        where m.recomcode = #{recomcode}
        <!-- and m.is_delete = b'0' -->
    </select>

    <select id="getUserByAccno" parameterType="java.lang.String" resultMap="BaseResultMap">
        select *
        from anchor_mem_baseinfo m
        where m.accno = #{accno}
        and m.is_delete = b'0'
    </select>

    <select id="getOrderBetRecordAmount" parameterType="java.util.List" resultType="java.math.BigDecimal">
        SELECT ifnull(sum(o.bet_amount),0.00)
        from order_bet_record o
        where o.id in
        <foreach close=")" collection="list" index="index" item="s" open="(" separator=",">
            #{s}
        </foreach>
    </select>

    <select id="getUserByAccnoForSources" parameterType="java.lang.String" resultMap="BaseResultMap">
		select *
		from anchor_mem_baseinfo m
		where m.accno = #{accno}
	</select>

    <!-- 更新粉丝数 -->
    <update id="updateFansNum" parameterType="com.likes.common.model.request.UsersRequest">
        update anchor_mem_baseinfo
        <set>
            <!-- 收藏 -->
            <if test="isattention == 0 ">
                <!-- fansnum = IFNULL(fansnum,1) - 1, -->
                <![CDATA[  fansnum = IF(fansnum <= 0,1,fansnum) - 1, ]]>
            </if>
            <if test="isattention == 1 ">
                fansnum = IFNULL(fansnum,0) + 1,
            </if>
        </set>
        where memid = #{memid,jdbcType=BIGINT}
        and fansnum &gt;= 0
    </update>

    <!--<select id="getAttentionnum" parameterType="java.lang.String" resultType="java.lang.Integer">-->
    <!--SELECT COUNT(1) AS attentionnum -->
    <!--FROM anchor_mem_follow mf-->
    <!--INNER JOIN anchor_mem_baseinfo mb on mf.accno = mb.accno-->
    <!--WHERE  mb.accno = #{accno}-->
    <!--AND mb.is_delete = b'0'-->
    <!--and mf.memid is NOT NULL-->
    <!--and mf.is_delete = b'0'-->
    <!--</select>-->

    <!--<select id="getCollectionnum" parameterType="java.lang.String" resultType="java.lang.Integer">-->
    <!--SELECT COUNT(1) as collectionnum-->
    <!--FROM bas_favorites bf INNER JOIN 	bas_video bv ON bf.videoid = bv.videoid-->
    <!--WHERE  bf.accno =#{accno}-->
    <!--and bf.is_delete = b'0'-->
    <!--AND bv.is_delete = b'0'-->
    <!--AND bv.checkstatus = 8-->
    <!--</select>-->

    <select id="getResourcesnum" parameterType="java.lang.String" resultType="java.lang.Integer">
	    SELECT COUNT(1) as resourcesnum
	    FROM bas_video bv
	    WHERE bv.accno = #{accno}
	    AND bv.is_delete = b'0'
	    AND bv.checkstatus = 8
	</select>

    <update id="updateAddGold" parameterType="com.likes.common.model.request.UsersRequest">
	 	update anchor_mem_baseinfo
    	set goldnum = IFNULL(goldnum,0) + #{goldnum,jdbcType=BIGINT},
    	    no_withdrawal_amount = no_withdrawal_amount + #{goldnum,jdbcType=BIGINT},
    	    pay_amount = IFNULL(pay_amount,0) + #{goldnum,jdbcType=BIGINT}
    	where accno = #{accno,jdbcType=VARCHAR}
	</update>

    <update id="updateMemBalance">
	 	update anchor_mem_baseinfo
    	set goldnum = IFNULL(goldnum,0) + #{amount,jdbcType=BIGINT},
    	    no_withdrawal_amount = no_withdrawal_amount + #{namount,jdbcType=BIGINT},
    	    pay_amount = IFNULL(pay_amount,0) + #{payamount,jdbcType=BIGINT}
    	where accno = #{accno,jdbcType=VARCHAR}
	</update>

    <update id="updateSubtractGold" parameterType="com.likes.common.model.request.UsersRequest">
        update anchor_mem_baseinfo
        set goldnum = goldnum - #{goldnum,jdbcType=BIGINT}
        <if test="noWithdrawalAmount != null  and  noWithdrawalAmount != '' ">
            ,no_withdrawal_amount = if( no_withdrawal_amount - #{noWithdrawalAmount,jdbcType=BIGINT} &lt; 0 , 0, no_withdrawal_amount - #{noWithdrawalAmount,jdbcType=BIGINT} )
        </if>
        <if test="consumeAmount != null  and  consumeAmount != '' ">
            ,consume_amount = consume_amount+#{consumeAmount}
        </if>
        where memid = #{memid,jdbcType=BIGINT}
        AND goldnum &gt;= #{goldnum,jdbcType=BIGINT}
    </update>

    <select id="getUserRecomcodeGold" parameterType="java.lang.String" resultType="com.likes.common.model.dto.member.UserGoldDO">
		SELECT 
		  ( SELECT mr.refaccno
		  FROM mem_relationship mr
		  WHERE mr.accno = #{accno}
		  AND mr.is_delete = b'0'
		  LIMIT 1 ) as refaccno,
		  ( SELECT mr.relaid
		  FROM mem_relationship mr
		  WHERE mr.accno = #{accno}
		  AND mr.is_delete = b'0'
		  LIMIT 1 ) as relaid,
		  ( SELECT mg.goldchangid
		  FROM mem_goldchange mg
		  WHERE mg.refid in
		    ( SELECT mr.relaid
		    FROM mem_relationship mr
		    WHERE mr.accno = #{accno}
		    AND mr.is_delete = b'0' )
		  AND mg.is_delete = b'0'
		  AND mg.accno in
		    ( SELECT mr.refaccno
		    FROM mem_relationship mr
		    WHERE mr.accno = #{accno}
		    AND mr.is_delete = b'0' )
		  AND mg.changetype = 7
		  ) as goldchangid
		from anchor_mem_baseinfo mb 
		WHERE mb.accno = #{accno}
		AND mb.is_delete = b'0'
	</select>

    <update id="updateAddress" parameterType="com.likes.common.mybatis.entity.anchor.AnchorMemBaseinfo">
		update anchor_mem_baseinfo
		set tag = #{tag}, logincountry = #{logincountry}
		where accno = #{accno}
	</update>

    <select id="getRepeateNickname" parameterType="java.lang.String" resultMap="BaseResultMap">
		SELECT *
		from anchor_mem_baseinfo mb
		where mb.nickname = #{nickname}
		and is_delete = b'0'
		limit 1
	</select>

    <select id="findUsers" parameterType="com.likes.common.model.dto.member.UserDO" resultType="com.likes.common.model.dto.member.UserDO">
		SELECT m.mobileno, m.nickname, m.accno
		FROM anchor_mem_baseinfo m
		INNER JOIN anchor_mem_login l ON m.accno = l.accno AND l.accstatus = 1
		WHERE m.is_delete = b'0'
		AND l.logintype IN (1,2,7)
		AND ( m.mobileno LIKE CONCAT('%',#{nickname,jdbcType=VARCHAR},'%')
            OR m.nickname LIKE CONCAT('%',#{nickname,jdbcType=VARCHAR},'%')
            OR m.memname LIKE CONCAT('%',#{nickname,jdbcType=VARCHAR},'%') )
		LIMIT 15
	</select>

    <select id="findAllUsers" resultType="com.likes.common.model.dto.member.UserDO">
		SELECT m.mobileno, m.nickname, m.accno
		FROM anchor_mem_baseinfo m
		INNER JOIN mem_login l ON m.accno = l.accno AND l.accstatus = 1
		WHERE m.is_delete = b'0'
		AND l.logintype IN (1,2,7)
	</select>

    <select id="applyAnchorList" parameterType="com.likes.common.model.request.UserRequest" resultType="com.likes.common.model.dto.member.MemBaseinfoDO">
        SELECT mb.*
        FROM anchor_mem_baseinfo mb
        INNER JOIN anchor_mem_certification mc ON mc.accno = mb.accno
        WHERE mb.is_delete = b'0'
        AND mc.is_delete = b'0'
        AND mc.certstatus = 1
        <if test="username != null  and  username != '' ">
            and ( mb.nickname like CONCAT('%',#{username},'%')
            or mb.memname like CONCAT('%',#{username},'%')
            or mb.mobileno like CONCAT('%',#{username},'%') )
        </if>
        ORDER BY mc.update_time ASC
    </select>

    <update id="updatePayAgent" parameterType="com.likes.common.mybatis.entity.TraAgentclearing">
    update anchor_mem_baseinfo mb
    set mb.goldnum = (mb.goldnum + #{reverseamt,jdbcType=DECIMAL}),
        update_user = #{accno,jdbcType=VARCHAR}
    where mb.is_delete = b'0'
    and mb.accno = #{accno,jdbcType=VARCHAR}
  </update>

    <select id="selectByAccno" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from anchor_mem_baseinfo
        where accno = #{accno}
        and is_delete = b'0'
    </select>

    <select id="getNickNameList" resultType="java.lang.String">
        select nickname
        from anchor_mem_baseinfo
        where accno in
        <foreach close=")" collection="array" index="index" item="s" open="(" separator=",">
            #{s}
        </foreach>
        and is_delete = b'0'
    </select>

    <select id="getGpList" resultType="com.likes.common.model.GreatPersonList">
        <!-- 时时彩未开奖投注 -->
        select t.nickname,ml.memlevel,t.headimg, t.totalnums, t.lucknums, TRUNCATE(t.lucknums / t.totalnums,2) as luckrage,
        los.period, lok.lotname, lor.rulename, trod.orderid, IF(lok.lotname LIKE "%三%",(3-DATE_FORMAT(now(),'%i')%3)*60-DATE_FORMAT(now(),'%s'),60-DATE_FORMAT(now(),'%s'))as endsecond
        from(
        select m.nickname,m.headimg,m.accno,sum(m.totalnums) as totalnums,sum(m.lucknums) as lucknums
        from (
        select mb.nickname,mb.headimg, tod.accno,count(ls.sscorderid)as totalnums, (select
        count(*) from lot_sscorder lss
        INNER JOIN tra_orderinfom todd on
        lss.orderid = todd.orderid where lss.is_delete = b'0' and lss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from lot_sscorder ls
        Inner join tra_orderinfom tod on tod.orderid = ls.orderid
        inner join anchor_mem_baseinfo mb on mb.accno = tod.accno
        where ls.is_delete = b'0' GROUP BY tod.accno
        UNION all
        select mb.nickname,mb.headimg, tod.accno,count(qs.ksorderid)as totalnums, (select
        count(*) from quick_sscorder qss
        INNER JOIN tra_orderinfom todd on
        qss.orderid = todd.orderid where qss.is_delete = b'0' and qss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from quick_sscorder qs
        Inner join tra_orderinfom tod on tod.orderid = qs.orderid
        inner join anchor_mem_baseinfo mb on mb.accno = tod.accno
        where qs.is_delete = b'0' GROUP BY tod.accno
        )m
        group by m.accno
        )t
        INNER JOIN tra_orderinfom trod on trod.accno = t.accno and trod.is_delete = b'0' and trod.orderstatus = 'ord08'
        inner join lot_sscorder ltss on ltss.orderid = trod.orderid and ltss.status = 0
        Inner join mem_level ml on ml.accno = t.accno and ml.is_delete = b'0'
        inner join lot_sschistory los on ltss.sschistoryid = los.sschistoryid
        inner join lot_kindinfo lok on lok.lotkindid = los.lotkindid
        inner join lot_oddsset ldd on FIND_IN_SET(ldd.oddsid,ltss.oddsids)
        inner join lot_ruleinfo lor on ldd.lotruleid = lor.lotruleid
        where TRUNCATE(t.lucknums / t.totalnums,2) &gt;=
        IFNULL((select sysparamvalue from sys_parameter where sysparamcode = 'gp_luckrate' and is_delete = b'0' and status =0 ),0.20)
        GROUP BY trod.accno
        <!-- 快3未开奖投注 -->
        UNION all
        select t.nickname,ml.memlevel,t.headimg, t.totalnums, t.lucknums, TRUNCATE(t.lucknums / t.totalnums,2) as luckrage,
        qos.period, lok.lotname, lor.rulename, trod.orderid, IF(lok.lotname LIKE "%三分快%",(3-DATE_FORMAT(now(),'%i')%3)*60-DATE_FORMAT(now(),'%s'),60-DATE_FORMAT(now(),'%s'))as endsecond
        from(
        select m.nickname,m.headimg,m.accno,sum(m.totalnums) as totalnums,sum(m.lucknums) as lucknums
        from (
        select mb.nickname,mb.headimg, tod.accno,count(ls.sscorderid)as totalnums, (select
        count(*) from lot_sscorder lss
        INNER JOIN tra_orderinfom todd on
        lss.orderid = todd.orderid where lss.is_delete = b'0' and lss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from lot_sscorder ls
        Inner join tra_orderinfom tod on tod.orderid = ls.orderid
        inner join anchor_mem_baseinfo mb on mb.accno = tod.accno
        where ls.is_delete = b'0' GROUP BY tod.accno
        UNION all
        select mb.nickname,mb.headimg, tod.accno,count(qs.ksorderid)as totalnums, (select
        count(*) from quick_sscorder qss
        INNER JOIN tra_orderinfom todd on
        qss.orderid = todd.orderid where qss.is_delete = b'0' and qss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from quick_sscorder qs
        Inner join tra_orderinfom tod on tod.orderid = qs.orderid
        inner join anchor_mem_baseinfo mb on mb.accno = tod.accno
        where qs.is_delete = b'0' GROUP BY tod.accno
        )m
        group by m.accno
        )t
        INNER JOIN tra_orderinfom trod on trod.accno = t.accno and trod.is_delete = b'0' and trod.orderstatus = 'ord08'
        inner join quick_sscorder qtss on qtss.orderid = trod.orderid and qtss.status = 0
        Inner join mem_level ml on ml.accno = t.accno and ml.is_delete = b'0'
        inner join quick_sschistory qos on qtss.kshistoryid = qos.kshistoryid
        inner join lot_kindinfo lok on lok.lotkindid = qos.lotkindid
        inner join lot_oddsset ldd on FIND_IN_SET(ldd.oddsid,qtss.oddsids)
        inner join lot_ruleinfo lor on ldd.lotruleid = lor.lotruleid
        where TRUNCATE(t.lucknums / t.totalnums,2) &gt;=
        IFNULL((select sysparamvalue from sys_parameter where sysparamcode = 'gp_luckrate' and is_delete = b'0' and status =0 ),0.20)
        GROUP BY trod.accno
        <!-- 时时彩已结束投注 -->
        UNION all
        select t.nickname,ml.memlevel,t.headimg, t.totalnums, t.lucknums, TRUNCATE(t.lucknums / t.totalnums,2) as luckrage,
        los.period, lok.lotname, lor.rulename, trod.orderid, 0 as endsecond
        from(
        select m.nickname,m.headimg,m.accno,sum(m.totalnums) as totalnums,sum(m.lucknums) as lucknums
        from (
        select mb.nickname,mb.headimg, tod.accno,count(ls.sscorderid)as totalnums, (select
        count(*) from lot_sscorder lss
        INNER JOIN tra_orderinfom todd on
        lss.orderid = todd.orderid where lss.is_delete = b'0' and lss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from lot_sscorder ls
        Inner join tra_orderinfom tod on tod.orderid = ls.orderid
        inner join anchor_mem_baseinfo mb on mb.accno = tod.accno
        where ls.is_delete = b'0' GROUP BY tod.accno
        UNION all
        select mb.nickname,mb.headimg, tod.accno,count(qs.ksorderid)as totalnums, (select
        count(*) from quick_sscorder qss
        INNER JOIN tra_orderinfom todd on
        qss.orderid = todd.orderid where qss.is_delete = b'0' and qss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from quick_sscorder qs
        Inner join tra_orderinfom tod on tod.orderid = qs.orderid
        inner join anchor_mem_baseinfo mb on mb.accno = tod.accno
        where qs.is_delete = b'0' GROUP BY tod.accno
        )m
        group by m.accno
        )t
        INNER JOIN tra_orderinfom trod on trod.accno = t.accno and trod.is_delete = b'0' and trod.orderstatus = 'ord08'
        inner join lot_sscorder ltss on ltss.orderid = trod.orderid and ltss.status != 0
        Inner join mem_level ml on ml.accno = t.accno and ml.is_delete = b'0'
        inner join lot_sschistory los on ltss.sschistoryid = los.sschistoryid
        inner join lot_kindinfo lok on lok.lotkindid = los.lotkindid
        inner join lot_oddsset ldd on FIND_IN_SET(ldd.oddsid,ltss.oddsids)
        inner join lot_ruleinfo lor on ldd.lotruleid = lor.lotruleid
        where TRUNCATE(t.lucknums / t.totalnums,2) &gt;=
        IFNULL((select sysparamvalue from sys_parameter where sysparamcode = 'gp_luckrate' and is_delete = b'0' and status =0 ),0.20)
        GROUP BY trod.accno
        <!-- 快3已结束投注 -->
        UNION all
        select t.nickname,ml.memlevel,t.headimg, t.totalnums, t.lucknums, TRUNCATE(t.lucknums / t.totalnums,2) as luckrage,
        qos.period, lok.lotname, lor.rulename, trod.orderid, 0 as endsecond
        from(
        select m.nickname,m.headimg,m.accno,sum(m.totalnums) as totalnums,sum(m.lucknums) as lucknums
        from (
        select mb.nickname,mb.headimg, tod.accno,count(ls.sscorderid)as totalnums, (select
        count(*) from lot_sscorder lss
        INNER JOIN tra_orderinfom todd on
        lss.orderid = todd.orderid where lss.is_delete = b'0' and lss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from lot_sscorder ls
        Inner join tra_orderinfom tod on tod.orderid = ls.orderid
        inner join anchor_mem_baseinfo mb on mb.accno = tod.accno
        where ls.is_delete = b'0' GROUP BY tod.accno
        UNION all
        select mb.nickname,mb.headimg, tod.accno,count(qs.ksorderid)as totalnums, (select
        count(*) from quick_sscorder qss
        INNER JOIN tra_orderinfom todd on
        qss.orderid = todd.orderid where qss.is_delete = b'0' and qss.status = 8
        and todd.accno = tod.accno ) as lucknums
        from quick_sscorder qs
        Inner join tra_orderinfom tod on tod.orderid = qs.orderid
        inner join anchor_mem_baseinfo mb on mb.accno = tod.accno
        where qs.is_delete = b'0' GROUP BY tod.accno
        )m
        group by m.accno
        )t
        INNER JOIN tra_orderinfom trod on trod.accno = t.accno and trod.is_delete = b'0' and trod.orderstatus = 'ord08'
        inner join quick_sscorder qtss on qtss.orderid = trod.orderid and qtss.status != 0
        Inner join mem_level ml on ml.accno = t.accno and ml.is_delete = b'0'
        inner join quick_sschistory qos on qtss.kshistoryid = qos.kshistoryid
        inner join lot_kindinfo lok on lok.lotkindid = qos.lotkindid
        inner join lot_oddsset ldd on FIND_IN_SET(ldd.oddsid,qtss.oddsids)
        inner join lot_ruleinfo lor on ldd.lotruleid = lor.lotruleid
        where TRUNCATE(t.lucknums / t.totalnums,2) &gt;=
        IFNULL((select sysparamvalue from sys_parameter where sysparamcode = 'gp_luckrate' and is_delete = b'0' and status =0 ),0.20)
        GROUP BY trod.accno

        order by orderid desc
    </select>

    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from anchor_mem_baseinfo
        where memid = #{memId}
        and is_delete = b'0'
    </select>

    <select id="countAllBalanceAmount" resultType="java.math.BigDecimal">
        select sum(balance) from anchor_mem_baseinfo
        where 1=1
        <if test="null != startTime">
            and create_time <![CDATA[ >= ]]> #{startTime}
        </if>
        <if test="null != endTime">
            and create_time <![CDATA[ <= ]]> #{endTime}
        </if>
    </select>

    <update id="updatePersonalFinancialInfo">

            UPDATE anchor_mem_baseinfo m
            SET m.goldnum = (
              CASE
              WHEN  m.goldnum + #{amount} <![CDATA[ < ]]> 0 THEN
              0
              WHEN m.goldnum + #{amount} <![CDATA[ >= ]]> 0 THEN
              m.goldnum + #{amount}
              END
            ),
             m.wait_amount = (
                CASE
                WHEN m.wait_amount + #{waitamount} <![CDATA[ < ]]> 0 THEN
                    0
                WHEN m.wait_amount + #{waitamount} <![CDATA[ >= ]]> 0 THEN
                    m.wait_amount + #{waitamount}
                END
            ),
             m.pay_amount = m.pay_amount + #{pamount},
             m.bet_amount = m.bet_amount + #{bamount},
             m.no_withdrawal_amount = (
                CASE
                WHEN m.no_withdrawal_amount + #{namount}  <![CDATA[ > ]]> 0 THEN
                    m.no_withdrawal_amount + #{namount}
                WHEN m.no_withdrawal_amount + #{namount} <![CDATA[ <= ]]> 0 THEN
                    0
                END
            ),
            m.consume_amount = (
                CASE
                WHEN m.consume_amount + #{consumeAcmount}  <![CDATA[ > ]]> 0 THEN
                    m.consume_amount + #{consumeAcmount}
                WHEN m.consume_amount + #{consumeAcmount} <![CDATA[ <= ]]> 0 THEN
                    0
                END
            ),
             m.withdrawal_amount = m.withdrawal_amount + #{wamount}
            WHERE m.accno = #{accno}

    </update>

    <update id="updateMemberAmount" parameterType="java.util.Map">
        UPDATE anchor_mem_baseinfo m
        SET m.goldnum = (
          CASE
          WHEN  m.goldnum + #{amount} <![CDATA[ < ]]> 0 THEN
          0
          WHEN m.goldnum + #{amount} <![CDATA[ >= ]]> 0 THEN
          m.goldnum + #{amount}
          END
        ),
         m.wait_amount = (
            CASE
            WHEN m.wait_amount + #{waitamount} <![CDATA[ < ]]> 0 THEN
                0
            WHEN m.wait_amount + #{waitamount} <![CDATA[ >= ]]> 0 THEN
                m.wait_amount + #{waitamount}
            END
        ),
         m.pay_amount = m.pay_amount + #{pamount},
         m.bet_amount = m.bet_amount + #{bamount},
         m.no_withdrawal_amount = (
            CASE
            WHEN m.no_withdrawal_amount + #{namount}  <![CDATA[ > ]]> 0 THEN
                m.no_withdrawal_amount + #{namount}
            WHEN m.no_withdrawal_amount + #{namount} <![CDATA[ <= ]]> 0 THEN
                0
            END
        ),
         m.withdrawal_amount = m.withdrawal_amount + #{wamount}
        WHERE m.accno = #{accno}
	</update>

    <update id="updateMemberForbit" parameterType="com.likes.common.mybatis.entity.anchor.AnchorMemBaseinfo">
        update anchor_mem_baseinfo
        set forbid_talk_type = #{forbidTalkType,jdbcType=INTEGER},
        forbid_talk_start = #{forbidTalkStart,jdbcType=TIMESTAMP},
        forbid_talk_end = #{forbidTalkEnd,jdbcType=TIMESTAMP},
        forbid_in_type = #{forbidInType,jdbcType=INTEGER},
        forbid_in_start = #{forbidInStart,jdbcType=TIMESTAMP},
        forbid_in_end = #{forbidInEnd,jdbcType=TIMESTAMP},
        update_time = NOW()
        <if test="updateUser != null  and  updateUser != '' ">
            ,update_user = #{updateUser}
        </if>
        where memid = #{memid,jdbcType=BIGINT}
    </update>

    <select id="countFirstDepositAmount" parameterType="com.likes.common.model.vo.ProfitAndLossCountVO" resultType="java.math.BigDecimal">
        SELECT IFNULL(sum(o.amount),0.00)
        FROM mem_goldchange o
        where o.changetype =1
        and o.is_delete = 0 ${time}
        and o.goldchangid IN
        <foreach close=")" collection="list" index="index" item="s" open="(" separator=",">
            #{s}
        </foreach>
    </select>

    <update id="updateWithdrawalAmount">
        update anchor_mem_baseinfo m
        set m.withdrawal_amount = m.withdrawal_amount +  IFNULL(#{withdrawalAmount},0) ,
            m.update_time = SYSDATE(),
            m.update_user = #{updateUser}
        where m.accno =#{accno}
    </update>

    <select id="selectByPrimaryKeyDeleteFalse" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from anchor_mem_baseinfo
        where memid = #{memid,jdbcType=BIGINT}
        and is_delete = b'0'
    </select>

    <update id="updateMemUniqueId" parameterType="java.util.Map">
        <foreach collection="data" index="memid" item="value">
            update anchor_mem_baseinfo set unique_id = #{value,jdbcType=VARCHAR} where memid=#{memid,jdbcType=BIGINT};
        </foreach>
    </update>

</mapper>