package com.likes.common.config;import io.swagger.annotations.Api;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Profile;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.*;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spi.service.contexts.SecurityContext;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;import java.util.ArrayList;import java.util.List;@Configuration@EnableSwagger2@Profile({"dev","test","uat"}) //配置 环境 开启swagger访问`public class SwaggerConfig {    @Bean    public Docket swaggerSpringMvcPlugin() {        return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class)).paths(PathSelectors.any()).build()                .securitySchemes(securitySchemes())                .securityContexts(securityContexts());    }    private List<ApiKey> securitySchemes() {        List<ApiKey> apiKeyList= new ArrayList<ApiKey>();        apiKeyList.add(new ApiKey("acctoken", "acctoken", "header"));        return apiKeyList;    }    private List<SecurityContext> securityContexts() {        List<SecurityContext> securityContexts=new ArrayList<>();        securityContexts.add(                SecurityContext.builder()                        .securityReferences(defaultAuth())                        .forPaths(PathSelectors.regex("^(?!auth).*$"))                        .build());        return securityContexts;    }    List<SecurityReference> defaultAuth() {        AuthorizationScope authorizationScope = new AuthorizationScope("global", "accessEverything");        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];        authorizationScopes[0] = authorizationScope;        List<SecurityReference> securityReferences=new ArrayList<>();        securityReferences.add(new SecurityReference("acctoken", authorizationScopes));        return securityReferences;    }    // 构建 api文档的详细信息函数,注意这里的注解引用的是哪个    private ApiInfo apiInfo() {        return new ApiInfoBuilder()                // 页面标题1                .title("点赞RESTful API")                // 描述                .description("点赞平台").termsOfServiceUrl("http://localhost:5859/")                // 创建人                .contact(new Contact("Presoft", "http://www.baidu.com", ""))                // 版本号                .version("1.0.1").build();    }}